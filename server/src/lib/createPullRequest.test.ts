const mockBranchName = 'boop';
const mockOctokitRequest = jest.fn();
class MockOctoKit {
  super() {}
  public request = mockOctokitRequest;
}
jest.mock('@octokit/core', () => ({
  Octokit: MockOctoKit,
}));

import createPullRequest from './createPullRequest';

describe('createPullRequest', () => {
  test('submits with default title and body if none are passed in', async () => {
    const nowDate = new Date();
    const now = `${nowDate.getFullYear()}-${nowDate.getMonth() + 1}-${nowDate.getDate()} at ${nowDate.getUTCHours()}:${nowDate.getUTCMinutes()} UTC`;
    await createPullRequest({
      head: mockBranchName,
    });
    expect(mockOctokitRequest).toHaveBeenCalledWith(
      "POST /repos/{owner}/{repo}/pulls",
      {
        base: 'main',
        head: mockBranchName,
        body: `Generated by Lizard Buddy Manual Test at ${now}`,
        owner: 'inkblotty',
        repo: 'lizard-buddy',
        title: 'Generated Lizard Buddy PR',
      }
    );
  });

  test('submits with title and body if passed in', async () => {
    const nowDate = new Date();
    const now = `${nowDate.getFullYear()}-${nowDate.getMonth() + 1}-${nowDate.getDate()} at ${nowDate.getUTCHours()}:${nowDate.getUTCMinutes()} UTC`;
    const mockTitle = 'Beep Boop Beep';
    const mockBody = `Hello I am a test\n${now}`;
    await createPullRequest({
      head: mockBranchName,
      title: mockTitle,
      body: mockBody,
    });
    expect(mockOctokitRequest).toHaveBeenCalledWith(
      "POST /repos/{owner}/{repo}/pulls",
      {
        base: 'main',
        head: mockBranchName,
        body: mockBody,
        owner: 'inkblotty',
        repo: 'lizard-buddy',
        title: mockTitle,
      }
    );
  });

  test('appends date to body if passed in without a date', async () => {
    const nowDate = new Date();
    const now = `${nowDate.getFullYear()}-${nowDate.getMonth() + 1}-${nowDate.getDate()} at ${nowDate.getUTCHours()}:${nowDate.getUTCMinutes()} UTC`;
    const mockTitle = 'Beep Boop Beep';
    const mockBody = `Hello I am a test`;
    await createPullRequest({
      head: mockBranchName,
      title: mockTitle,
      body: mockBody,
    });
    expect(mockOctokitRequest).toHaveBeenCalledWith(
      "POST /repos/{owner}/{repo}/pulls",
      {
        base: 'main',
        head: mockBranchName,
        body: mockBody + `\n\n${now}`,
        owner: 'inkblotty',
        repo: 'lizard-buddy',
        title: mockTitle,
      }
    );
  });
});
